generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  HR_ADMIN
  SUPERVISOR
  EMPLOYEE
  EXECUTIVE
  FINAL_APPROVER
}

enum AuthProvider {
  SSO
  LOCAL
}

model User {
  id                       String                    @id @default(cuid())
  email                    String                    @unique
  passwordHash             String?                   
  role                     UserRole                  // Primary role for backward compatibility
  firstName                String
  lastName                 String
  dept                     String
  title                    String
  managerId                String?
  supervisorId             String?
  supervisor               User?                     @relation("Supervisor", fields: [supervisorId], references: [id])
  supervisees              User[]                    @relation("Supervisor")
  active                   Boolean                   @default(true)
  authProvider             AuthProvider              @default(LOCAL)
  emailVerifiedAt          DateTime?
  mustChangePassword        Boolean                   @default(false)
  passwordResetToken        String?
  passwordResetExpires      DateTime?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  createdById              String?
  createdBy                User?                     @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers             User[]                    @relation("UserCreatedBy")
  employee                 Employee?
  manager                  User?                     @relation("UserManager", fields: [managerId], references: [id])
  subordinates             User[]                    @relation("UserManager")
  notifications            Notification[]
  appraisalDrafts          AppraisalDraft[]
  systemSettings           SystemSetting[]
  chatLogs                 ChatLog[]
  userRoles                UserRoleAssignment[]      // Multiple roles support

  @@map("users")
}

model UserRoleAssignment {
  id       String   @id @default(cuid())
  userId   String
  role     UserRole
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, role])
  @@map("user_role_assignments")
}

model Employee {
  id                     String              @id @default(cuid())
  userId                 String              @unique
  dept                   String
  division               String
  employmentType         String
  supervisorId           String?
  contractTerm           String?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  contractEndDate        DateTime?           
  contractStartDate      DateTime?           
  employmentCategory     EmploymentCategory  @default(GENERAL_STAFF)
  categoryId             String?             
  category               EmployeeCategory?   @relation(fields: [categoryId], references: [id])
  user                   User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  supervisor             Employee?           @relation("EmployeeSupervisor", fields: [supervisorId], references: [id])
  subordinates           Employee[]          @relation("EmployeeSupervisor")
  appraisalInstances     AppraisalInstance[]
  appraisalDrafts        AppraisalDraft[]

  @@map("employees")
}

model EmployeeCategory {
  id                String              @id @default(cuid())
  name              String              @unique
  description       String?
  filePath          String?             
  active            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  employees         Employee[]
  templates         AppraisalTemplate[]

  @@map("employee_categories")
}

model AppraisalTemplate {
  id                String                @id @default(cuid())
  name              String
  type              AppraisalTemplateType
  configJson        Json                  
  templateStructure Json?
  scoringRules      Json?
  weighting         Json?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  displayName       String                @default("")
  version           String                @default("1.0")
  code              String                @unique @default("")
  published         Boolean               @default(false)
  categoryId        String?               
  category          EmployeeCategory?     @relation(fields: [categoryId], references: [id])
  filePath          String?               
  active            Boolean               @default(true)
  sections          AppraisalSection[]
  appraisalInstances AppraisalInstance[]

  @@map("appraisal_templates")
}

model AppraisalCycle {
  id                 String              @id @default(cuid())
  name               String
  periodStart        DateTime?           
  periodEnd          DateTime?           
  status             String              @default("ACTIVE")
  startDate          DateTime?           
  endDate            DateTime?           
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  appraisalInstances AppraisalInstance[]

  @@map("appraisal_cycles")
}

model AppraisalInstance {
  id                    String              @id @default(cuid())
  employeeId            String
  templateId            String
  cycleId               String
  status                String              @default("DRAFT") // draft, in_review, awaiting_hr, completed, returned_to_manager
  selfAppraisalData     Json?
  managerReviewData     Json?
  managerSectionNotes   Json?
  managerComment        String?
  managerRating         String?
  contractBlock         String?
  managerSignedAt       DateTime?
  managerSignedName     String?
  reviewedAt            DateTime?
  createdBy             String
  reviewerId            String?
  
  // Divisional Head Review Fields
  divisionalHeadComments String?
  divisionalHeadDecision  String?  // confirm, do_not_confirm, renew, do_not_renew
  divisionalHeadReviewedAt DateTime?
  divisionalHeadSignedName String?
  divisionalHeadSignedAt   DateTime?
  
  // Final Approver Review Fields
  overallPerformanceComments String?
  confirmAppointment         Boolean? @default(false)
  extendProbation            Boolean? @default(false)
  recommendTermination       Boolean? @default(false)
  recommendNewContract       Boolean? @default(false)
  finalApproverSignature     String?
  finalApproverSignedAt      DateTime?
  finalApproverReviewedAt    DateTime?
  finalApproverReviewedBy    String?
  
  // HR Fields
  hrApprovedAt          DateTime?
  hrApprovedBy          String?
  hrComments            String?
  overallScore          Float?
  
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  employee              Employee            @relation(fields: [employeeId], references: [id])
  template               AppraisalTemplate  @relation(fields: [templateId], references: [id])
  cycle                 AppraisalCycle      @relation(fields: [cycleId], references: [id])
  sections              AppraisalSectionInstance[]
  responses             AppraisalResponse[]
  goals                 Goal[]
  competencies          AppraisalCompetency[]

  @@map("appraisal_instances")
}

model AppraisalSectionInstance {
  id          String   @id @default(cuid())
  instanceId  String
  instance    AppraisalInstance @relation(fields: [instanceId], references: [id])
  sectionId   String
  section     AppraisalSection @relation(fields: [sectionId], references: [id])
  score       Int      @default(0)
  maxScore    Int
  weight      Float
  weightedScore Float?
  comments    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("appraisal_section_instances")
}

model AppraisalSection {
  id          String   @id @default(cuid())
  templateId  String
  template    AppraisalTemplate @relation(fields: [templateId], references: [id])
  name        String
  description String?
  weight      Float    // 0.0 to 1.0
  maxScore    Int
  order       Int
  questions   AppraisalQuestion[]
  instances   AppraisalSectionInstance[]
  @@map("appraisal_sections")
}

model AppraisalQuestion {
  id          String   @id @default(cuid())
  sectionId   String
  section     AppraisalSection @relation(fields: [sectionId], references: [id])
  question    String
  description String?
  maxScore    Int
  order       Int
  responses   AppraisalResponse[]
  @@map("appraisal_questions")
}

model AppraisalResponse {
  id          String   @id @default(cuid())
  questionId  String
  question    AppraisalQuestion @relation(fields: [questionId], references: [id])
  instanceId  String
  instance    AppraisalInstance @relation(fields: [instanceId], references: [id])
  score       Int
  comments    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("appraisal_responses")
}

model Goal {
  id          String   @id @default(cuid())
  instanceId  String
  instance    AppraisalInstance @relation(fields: [instanceId], references: [id])
  description String
  performanceStandard String
  intendedResults String
  score       Int?     // 0-4 rating
  maxScore    Int      @default(4)
  comments    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("goals")
}

model AppraisalCompetency {
  id             String            @id @default(cuid())
  appraisalId    String
  competencyId   String
  appraisal      AppraisalInstance @relation(fields: [appraisalId], references: [id], onDelete: Cascade)
  competency     Competency        @relation(fields: [competencyId], references: [id])
  createdAt      DateTime          @default(now())

  @@unique([appraisalId, competencyId])
  @@map("appraisal_competencies")
}

model CompetencyCluster {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  category    String?
  competencies Competency[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("competency_clusters")
}

model Competency {
  id          String            @id @default(cuid())
  code        String            @unique
  name        String
  description String?
  definition  String?
  basicBehaviours String?
  aboveExpectationsBehaviours String?
  outstandingBehaviours String?
  department  String?
  jobLevel    String?
  category    String?
  clusterId   String
  cluster     CompetencyCluster @relation(fields: [clusterId], references: [id])
  appraisalCompetencies AppraisalCompetency[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("competencies")
}

enum EmploymentCategory {
  FACULTY
  GENERAL_STAFF
  EXECUTIVE
  CLINICAL
}

enum AppraisalTemplateType {
  FACULTY
  GENERAL_STAFF
  EXECUTIVE
  CLINICAL
  DEAN
  CLINICAL_INSTRUCTOR
  EXECUTIVE_MANAGEMENT
}

model SSOConfig {
  id          String   @id @default(cuid())
  isEnabled   Boolean  @default(false)
  clientId    String
  clientSecret String
  tenantId    String
  redirectUri String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sso_config")
}

model EmailLog {
  id        String   @id @default(cuid())
  to        String
  cc        String?
  subject   String
  status    String   // sent, failed, pending
  type      String   // notification, alert, etc.
  error     String?
  attempt   Int      @default(1)
  createdAt DateTime @default(now())

  @@map("email_logs")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  body      String
  link      String?
  type      String   // email_fallback, system_notice, etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model AppraisalDraft {
  id         String   @id @default(cuid())
  managerId  String
  employeeId String
  cycleId    String?
  templateId String?
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  manager    User     @relation(fields: [managerId], references: [id])
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("appraisal_drafts")
}


enum CompetencyCategory {
  CORE
  FUNCTIONAL
}

model SystemSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  category    String   @default("general")
  isEncrypted Boolean  @default(false)
  createdBy   String?
  createdByUser User?  @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model ChatLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question  String
  reply     String
  timestamp DateTime @default(now())
  sessionId String?  // Optional: for grouping conversations

  @@map("chat_logs")
}