import jsPDF from 'jspdf';

interface SelfEvaluationData {
  id: string;
  employee: {
    firstName: string;
    lastName: string;
    email: string;
    title: string;
    dept: string;
  };
  responses: Record<string, string>;
  createdAt: string;
  cycle?: {
    name: string;
    periodStart: string;
    periodEnd: string;
  };
}

export function generateSelfEvaluationPDF(data: SelfEvaluationData): void {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  let yPosition = 20;

  // Helper function to add text with word wrapping
  const addText = (text: string, x: number, y: number, maxWidth: number, fontSize: number = 10) => {
    doc.setFontSize(fontSize);
    const lines = doc.splitTextToSize(text, maxWidth);
    doc.text(lines, x, y);
    return y + (lines.length * (fontSize * 0.4));
  };

  // Helper function to check if we need a new page
  const checkNewPage = (requiredSpace: number) => {
    if (yPosition + requiredSpace > pageHeight - 20) {
      doc.addPage();
      yPosition = 20;
      return true;
    }
    return false;
  };

  // Header
  doc.setFillColor(108, 92, 231); // Purple color
  doc.rect(0, 0, pageWidth, 30, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('COSTAATT HR Performance Management', 20, 20);
  
  doc.setFontSize(14);
  doc.text('Self-Evaluation Report', 20, 25);

  // Reset text color
  doc.setTextColor(0, 0, 0);
  yPosition = 40;

  // Employee Information
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Employee Information', 20, yPosition);
  yPosition += 10;

  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  
  const employeeInfo = [
    `Name: ${data.employee.firstName} ${data.employee.lastName}`,
    `Email: ${data.employee.email}`,
    `Title: ${data.employee.title}`,
    `Department: ${data.employee.dept}`,
    `Evaluation Date: ${new Date(data.createdAt).toLocaleDateString()}`,
    data.cycle ? `Cycle: ${data.cycle.name}` : '',
    data.cycle ? `Period: ${new Date(data.cycle.periodStart).toLocaleDateString()} - ${new Date(data.cycle.periodEnd).toLocaleDateString()}` : ''
  ].filter(Boolean);

  employeeInfo.forEach(info => {
    if (checkNewPage(10)) return;
    doc.text(info, 20, yPosition);
    yPosition += 8;
  });

  yPosition += 10;

  // Self-Evaluation Responses
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Self-Evaluation Responses', 20, yPosition);
  yPosition += 10;

  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');

  // Process responses
  const responseEntries = Object.entries(data.responses || {});
  
  responseEntries.forEach(([key, value], index) => {
    const questionNumber = key.replace('question', '');
    const questionText = `Question ${questionNumber}:`;
    const responseText = value || 'No response provided';

    // Check if we need a new page for this question
    const questionHeight = 20;
    const responseHeight = Math.ceil(doc.getTextWidth(responseText) / (pageWidth - 40)) * 5;
    const totalHeight = questionHeight + responseHeight + 10;

    if (checkNewPage(totalHeight)) return;

    // Question
    doc.setFont('helvetica', 'bold');
    doc.text(questionText, 20, yPosition);
    yPosition += 8;

    // Response
    doc.setFont('helvetica', 'normal');
    const responseLines = doc.splitTextToSize(responseText, pageWidth - 40);
    doc.text(responseLines, 20, yPosition);
    yPosition += (responseLines.length * 5) + 10;

    // Add separator line
    if (index < responseEntries.length - 1) {
      doc.setDrawColor(200, 200, 200);
      doc.line(20, yPosition, pageWidth - 20, yPosition);
      yPosition += 5;
    }
  });

  // Footer
  const footerY = pageHeight - 20;
  doc.setFontSize(10);
  doc.setFont('helvetica', 'italic');
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by COSTAATT HR Performance Management System', 20, footerY);
  doc.text(`Generated on: ${new Date().toLocaleString()}`, pageWidth - 100, footerY);

  // Save the PDF
  const fileName = `Self-Evaluation-${data.employee.firstName}-${data.employee.lastName}-${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
}

// Alternative function for generating PDF from form data (for current self-evaluation)
export function generateCurrentSelfEvaluationPDF(
  employeeName: string,
  employeeEmail: string,
  responses: Record<string, string>
): void {
  const data: SelfEvaluationData = {
    id: 'current',
    employee: {
      firstName: employeeName.split(' ')[0] || '',
      lastName: employeeName.split(' ').slice(1).join(' ') || '',
      email: employeeEmail,
      title: '',
      dept: ''
    },
    responses,
    createdAt: new Date().toISOString()
  };

  generateSelfEvaluationPDF(data);
}
